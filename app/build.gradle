apply plugin: 'com.android.application' // APK 编译必须加载这个插件

def final String APK_TYPE = "type"
def final String APK_CHANNEL = "channel"

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    defaultConfig {
        applicationId "com.tinytongtong.gradle"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        flavorDimensions APK_TYPE,APK_CHANNEL
    }

    // 设置签名信息配置
    signingConfigs {
        debug {
            storeFile file(KEY_PATH) // 直接饮用gradle.properties中的信息
            storePassword KEY_PASS
            keyAlias ALIAS_NAME
            keyPassword ALIAS_PASS
        }

        release {
            storeFile file(KEY_PATH)
            storePassword KEY_PASS
            keyAlias ALIAS_NAME
            keyPassword ALIAS_PASS
        }
    }

    buildTypes {

        debug {
            // Java代码调用
            buildConfigField "String", "defaultNickName", "\"${DEFAULT_NICK_NAME}\""
            buildConfigField "Integer", "defaultNumber", DEFAULT_NUMBER

            // xml布局文件调用
            resValue "string", "user_name", "${USER_NAME}"
            resValue "dimen", "text_size", "${TEXT_SIZE}"
            resValue "color", "text_color", "${TEXT_COLOR}"
        }

        release {
            // Java代码调用
            buildConfigField "String", "defaultNickName", "\"${DEFAULT_NICK_NAME}\""
            buildConfigField "Integer", "defaultNumber", DEFAULT_NUMBER

            // xml布局文件调用
            resValue "string", "user_name", "${USER_NAME}"
            resValue "dimen", "text_size", "${TEXT_SIZE}"
            resValue "color", "text_color", "${TEXT_COLOR}"

            minifyEnabled true
            zipAlignEnabled true
//            versionNameSuffix "_release"
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            //打包好的文件进行输出，修改文件名称的操作在下面进行。
//            applicationVariants.all { variant ->
//                //这个修改输出的APK路径
//                if (variant.buildType.name != "debug") {//防止AS无法安装debug包(apk)
//                    variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk")
//                }
//                variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
//                    //这个修改输出APK的文件名
//                    apkData.outputFileName = "dxw_v${variant.productFlavors[0].versionName}_${variant.productFlavors[0].name}" +
//                            "_${variant.productFlavors[1].name}_${getGitRevision()}.apk"
//                }
//            }
        }
    }

    // 友盟多渠道打包
    productFlavors {
        full {
            // Assigns this product flavor to the "mode" flavor dimension.
            dimension APK_TYPE
            versionCode 65
            versionName "2.2.0"
        }

        mini {
            dimension APK_TYPE
            applicationId "com.tinytongtong.gradlemini"
            versionCode 0
            versionName "1.0.0"
        }

        wandoujia {
            dimension APK_CHANNEL
        }
        _360 {
            dimension APK_CHANNEL
        }
        baidu {
            dimension APK_CHANNEL
        }
        xiaomi {
            dimension APK_CHANNEL
        }
        tencent {
            dimension APK_CHANNEL
        }
        huawei {
            dimension APK_CHANNEL
        }
        anzhi {
            dimension APK_CHANNEL
        }
        _test {
            dimension APK_CHANNEL
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = ["TINY_CHANNEL_VALUE": name]
    }

    //针对2.3版本添加的配置
    lintOptions {
        checkReleaseBuilds false
        //Or, if you prefer, you can continue to check fr errors in release builds,
        //but continue the build even when errors are foundsL
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${SUPPORT_APPCOMPAT_V7_VERSION}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':mylibrary')
}

task parseAndroidManifest() {
    def androidManifest = new XmlSlurper().parse(getProjectDir().getAbsolutePath() + "/src/main/AndroidManifest.xml")
    println "package:" + androidManifest['@package']
    println "application.allowBackup:" + androidManifest.application.@'android:allowBackup'
}

def doSomethingInAppModule() {
    println('doSomethingInAppModule')
}

doSomethingInAppModule()

// 输出Gradle对象的一些信息
def printGradleInfoInAppModule() {
    println "In App, gradle id is " + gradle.hashCode()
    println "gradleHomeDir:" + gradle.gradleHomeDir
    println "gradleUserHomeDir:" + gradle.gradleUserHomeDir
    println "parent:" + gradle.parent
    println "gradle.ext.catName:" + gradle.catName

    println "rootProject.ext.TINY_TONGTONG_Value:" + rootProject.ext.TINY_TONGTONG_Value
}

printGradleInfoInAppModule()

// 配置阶段就会执行
tasks.all {
//    println "tasks.name --> " + it.getName()
}

// assemble 任务执行完成以后才会执行
tasks.getByName("assemble") {
    it.doLast {
        println "$project.name: After assemble"
    }
}

// 定义并配置myTask
// 在配置阶段就执行
task myTask {
    println "config myTask"
}

myTask.doFirst {
    println "before execute myTask"
}

myTask.doLast {
    println "after execute myTask"
}

//myTask.leftShift {
//    println "after execute myTask"
//}

//myTask << {
//    println "after execute myTask"
//}

// 带参数的Task
project.task('myTask1').doLast {
    println "after execute myTask1"
}

project.tasks.create('myTask2').doLast {
    println "after execute myTask2"
}

// 定义一个名字为wjzTask的task，属于wangjianzhou分组，并且依赖myTask1和myTask2两个task。
project.task("wjzTask", group: "wangjianzhou", description: "我自己的Group", dependsOn: ["myTask1", "myTask2"]).doLast {
    println "after execute wjzTask"
}